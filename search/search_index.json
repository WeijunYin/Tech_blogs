{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wei-Jun Yin's blog # Hi, I'm Weijun Yin, a phd student in Wuhan University. I'm interested in time series analysis in wind energy. My personal website is here . For full documentation visit mkdocs.org .","title":"Home"},{"location":"#wei-jun-yins-blog","text":"Hi, I'm Weijun Yin, a phd student in Wuhan University. I'm interested in time series analysis in wind energy. My personal website is here . For full documentation visit mkdocs.org .","title":"Wei-Jun Yin's blog"},{"location":"Research/Ch1/","text":"If we can","title":"How to Write"},{"location":"Research/Ch2/","text":"\\[ \\mathrm{v}_{\\mathrm{i}}^{\\mathrm{H}}(\\mathrm{dA}) \\mathrm{v}_{\\mathrm{i}}+\\mathrm{v}_{\\mathrm{i}}^{\\mathrm{H}} A \\mathrm{Ad} \\mathrm{v}_{\\mathrm{i}}=\\mathrm{v}_{\\mathrm{i}}^{\\mathrm{H}}\\left(\\mathrm{d} \\lambda_{\\mathrm{i}}\\right) \\mathrm{v}_{\\mathrm{i}}+\\mathrm{v}_{\\mathrm{i}}^{\\mathrm{H}} \\lambda_{\\mathrm{i}}\\left(\\mathrm{dv}_{\\mathrm{i}}\\right) \\]","title":"Second Part"},{"location":"Research/Multivariate_EDA/","text":"Multivariate Exploratory Data Analyses\uff08EDA) # Exploratory Data Analyses (EDA) \u53eb\u505a\u6570\u636e\u63a2\u7d22\u6027\u5206\u6790\uff0c\u662f\u7528\u6765\u5728\u5bf9\u65f6\u95f4\u5e8f\u5217\u5904\u7406\u524d\u5148\u8fdb\u884c\u6570\u636e \u5355\u53d8\u91cf\u65f6\u95f4\u5e8f\u5217\u662f\u6709\u591a\u4e2a\u53d8\u91cf\u7684\uff08\u9664\u65f6\u95f4\u5916\uff09\u7684\u5e8f\u5217\uff0c\u4e0b\u9762\u6211\u4eec\u8003\u8651\u5355\u53d8\u91cf\u65f6\u95f4\u5e8f\u5217\u7684EDA\u95ee\u9898 \u5bfc\u5165\u65f6\u95f4\u5e8f\u5217 # import pandas as pd df=pd.read_csv('TexasTurbine.csv') # \u6253\u5370\u524d\u4e8c\u5341\u884c df.head(20) \u5bfc\u5165\u5fc5\u8981\u7684\u5305 # import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt plt.style.use(\"Solarize_Light2\") #using style ggplot %matplotlib inline from mpl_toolkits.mplot3d import Axes3D import datetime as dt import plotly.graph_objects as go import plotly.express as px import datetime as dt \u83b7\u53d6\u6570\u636e\u70b9\u7684\u6570\u91cf(\u6570\u636e\u63cf\u8ff0\u7684\u65f6\u5019\u4f7f\u7528) # df.shape \u83b7\u53d6\u6570\u636e\u7684\u7c7b\u578b # df.info() \u628aTimestamp\u8f6c\u5316\u4e3astrftime\u7c7b\u578b # df['Time stamp'] = pd.to_datetime(df['Time stamp'], format='%b %d, %I:%M %p').dt.strftime('%b %d %H:%M:%S.%f') \u68c0\u67e5\u6570\u636e\u96c6\u7f3a\u5931\u7684\u503c # df.isnull().sum() \u68c0\u67e5\u6570\u636e\u96c6\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u503c\uff08\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u60f3\u8981\uff09 # # \u8f93\u51fa\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf df.duplicated().sum() # \u7528\u5e03\u5c14\u503c\u8bf4\u660e\u6570\u636e\u662f\u5426\u91cd\u590d(\u6700\u5f00\u59cb\u7684\u90a3\u4e00\u4e2a\u663e\u793aFalse) df.duplicated() # \u7b5b\u9009\u75c5\u5c55\u793a\u91cd\u590d\u6570\u636e df[df.duplicated()] # \u53bb\u6389\u91cd\u590d\u7684\u6570\u636e df.drop_duplicates() \u83b7\u53d6\u6570\u636e\u96c6\u7684\u6bcf\u4e00\u5217\u7684\u7edf\u8ba1\u4fe1\u606f # # round(2) \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d df.describe().round(2) \u6dfb\u52a0\u4e00\u5217\u7279\u5f81(\u7279\u5f81\u5de5\u7a0b\u7684\u57fa\u7840) # # \u6dfb\u52a0\u4e00\u5217\u7279\u5f81\uff0c\u8fd9\u4e2a\u7279\u5f81\u662f\u6708\u4efd df[\"Month\"]=df[\"Time stamp\"].dt.month \u663e\u793a\u7279\u5f81\u5de5\u7a0b\u540e\u7684\u5e8f\u5217\u7684\u4fe1\u606f # df.info() \u4f7f\u7528\u4e24\u5217\u753b\u51fa\u6563\u70b9\u56fe # plt.figure(figsize=(17,8)) # Time stamp\u662f\u4e00\u5217 # System power generated | (kW) \u662f\u4e00\u5217 sns.scatterplot(data=df,x=\"Time stamp\",y=\"System power generated | (kW)\",) plt.title(\"Effect the time by the system power\") plt.show() \u8bbe\u7f6e\u7d22\u5f15\u5e76\u4e14\u5728\u539f\u6765\u7684\u6570\u636e\u4e0a\u66f4\u6539 # # \u7d22\u5f15\u662f\u5217\u540d\u4e3aTime stamp\u7684\u5217 df.set_index(\"Time stamp\",inplace=True) \u5212\u5206\u9884\u6d4b\u7684\u503c\u548c\u7279\u5f81 # \u8fd9\u662f\u7531\u4e8e\u7279\u5f81\u548c\u76ee\u6807\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5217\u8868\u91cc\u9762\uff0c\u6240\u4ee5\u9700\u8981\u5206\u5f00 # X \u662f\u7279\u5f81 X = df.drop(columns=\"System power generated | (kW)\") # y \u662f\u8981\u9884\u6d4b\u7684\u91cf y = df[\"System power generated | (kW)\"] # y = system power generated \u5212\u5206\u6570\u636e\u96c6 # # \u5212\u5206\u6570\u636e\u96c6 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42) # \u6253\u5370\u6570\u636e\u7684\u6570\u91cf\uff0c\u6ce8\u610fy\u5e94\u8be5\u662f\u5f62\u5982(2628\uff0c),\u800cX\u5e94\u8be5\u662f\u5f62\u5982(6132,5)\uff0c5\u662f\u7279\u5f81\u6570 # 5\u5f53\u4e2d \u4e0d\u5305\u542btimestamp\u8fd9\u4e00\u5217 print(\"X Train : \", X_train.shape) print(\"X Test : \", X_test.shape) print(\"Y Train : \", y_train.shape) print(\"Y Test : \", y_test.shape) \u5b9a\u4e49\u6a21\u578b\uff1a \u8fd9\u91cc\u4f7f\u7528tensorflow\u6765\u5b9e\u73b0 # LR = LinearRegression() DTR = DecisionTreeRegressor() RFR = RandomForestRegressor() KNR = KNeighborsRegressor() MLP = MLPRegressor() XGB = XGBRegressor() SVR = SVR() \u5bf9\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u5b9e\u884c\u9884\u6d4b\uff0c\u5e76\u4e14\u8f93\u51faMSE\u7684\u8bef\u5dee\u503c # # \u4e0d\u540c\u7684\u8bad\u7ec3\u597d\u7684\u6a21\u578b li = [LR,DTR,RFR,KNR,KNR,XGB,SVR] # \u8bef\u5dee\u5217\u8868 d = {} for i in li: # \u8fdb\u884c\u9884\u6d4b i.fit(X_train,y_train) #\u8ba1\u7b97\u8bef\u5dee ypred = i.predict(X_test) # \u6253\u5370\u51fa\u6765\u8bef\u5dee print(i,\":\",r2_score(y_test,ypred)*100) # \u4fdd\u5b58\u8bef\u5dee d.update({str(i):i.score(X_test,y_test)*100}) \u6253\u5370\u6bcf\u79cd\u9884\u6d4b\u6a21\u578b\u7684\u8bef\u5dee # plt.figure(figsize=(30, 6)) plt.title(\"Algorithm vs Accuracy\") plt.xlabel(\"Algorithm\") plt.ylabel(\"Accuracy\") plt.plot(d.keys(),d.values(),marker='o',color='red') plt.show()","title":"Exploratory Data Analyses"},{"location":"Research/Multivariate_EDA/#multivariate-exploratory-data-analyseseda","text":"Exploratory Data Analyses (EDA) \u53eb\u505a\u6570\u636e\u63a2\u7d22\u6027\u5206\u6790\uff0c\u662f\u7528\u6765\u5728\u5bf9\u65f6\u95f4\u5e8f\u5217\u5904\u7406\u524d\u5148\u8fdb\u884c\u6570\u636e \u5355\u53d8\u91cf\u65f6\u95f4\u5e8f\u5217\u662f\u6709\u591a\u4e2a\u53d8\u91cf\u7684\uff08\u9664\u65f6\u95f4\u5916\uff09\u7684\u5e8f\u5217\uff0c\u4e0b\u9762\u6211\u4eec\u8003\u8651\u5355\u53d8\u91cf\u65f6\u95f4\u5e8f\u5217\u7684EDA\u95ee\u9898","title":"Multivariate Exploratory Data Analyses\uff08EDA)"},{"location":"Research/Multivariate_EDA/#_1","text":"import pandas as pd df=pd.read_csv('TexasTurbine.csv') # \u6253\u5370\u524d\u4e8c\u5341\u884c df.head(20)","title":"\u5bfc\u5165\u65f6\u95f4\u5e8f\u5217"},{"location":"Research/Multivariate_EDA/#_2","text":"import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt plt.style.use(\"Solarize_Light2\") #using style ggplot %matplotlib inline from mpl_toolkits.mplot3d import Axes3D import datetime as dt import plotly.graph_objects as go import plotly.express as px import datetime as dt","title":"\u5bfc\u5165\u5fc5\u8981\u7684\u5305"},{"location":"Research/Multivariate_EDA/#_3","text":"df.shape","title":"\u83b7\u53d6\u6570\u636e\u70b9\u7684\u6570\u91cf(\u6570\u636e\u63cf\u8ff0\u7684\u65f6\u5019\u4f7f\u7528)"},{"location":"Research/Multivariate_EDA/#_4","text":"df.info()","title":"\u83b7\u53d6\u6570\u636e\u7684\u7c7b\u578b"},{"location":"Research/Multivariate_EDA/#timestampstrftime","text":"df['Time stamp'] = pd.to_datetime(df['Time stamp'], format='%b %d, %I:%M %p').dt.strftime('%b %d %H:%M:%S.%f')","title":"\u628aTimestamp\u8f6c\u5316\u4e3astrftime\u7c7b\u578b"},{"location":"Research/Multivariate_EDA/#_5","text":"df.isnull().sum()","title":"\u68c0\u67e5\u6570\u636e\u96c6\u7f3a\u5931\u7684\u503c"},{"location":"Research/Multivariate_EDA/#_6","text":"# \u8f93\u51fa\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf df.duplicated().sum() # \u7528\u5e03\u5c14\u503c\u8bf4\u660e\u6570\u636e\u662f\u5426\u91cd\u590d(\u6700\u5f00\u59cb\u7684\u90a3\u4e00\u4e2a\u663e\u793aFalse) df.duplicated() # \u7b5b\u9009\u75c5\u5c55\u793a\u91cd\u590d\u6570\u636e df[df.duplicated()] # \u53bb\u6389\u91cd\u590d\u7684\u6570\u636e df.drop_duplicates()","title":"\u68c0\u67e5\u6570\u636e\u96c6\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u503c\uff08\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u60f3\u8981\uff09"},{"location":"Research/Multivariate_EDA/#_7","text":"# round(2) \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d df.describe().round(2)","title":"\u83b7\u53d6\u6570\u636e\u96c6\u7684\u6bcf\u4e00\u5217\u7684\u7edf\u8ba1\u4fe1\u606f"},{"location":"Research/Multivariate_EDA/#_8","text":"# \u6dfb\u52a0\u4e00\u5217\u7279\u5f81\uff0c\u8fd9\u4e2a\u7279\u5f81\u662f\u6708\u4efd df[\"Month\"]=df[\"Time stamp\"].dt.month","title":"\u6dfb\u52a0\u4e00\u5217\u7279\u5f81(\u7279\u5f81\u5de5\u7a0b\u7684\u57fa\u7840)"},{"location":"Research/Multivariate_EDA/#_9","text":"df.info()","title":"\u663e\u793a\u7279\u5f81\u5de5\u7a0b\u540e\u7684\u5e8f\u5217\u7684\u4fe1\u606f"},{"location":"Research/Multivariate_EDA/#_10","text":"plt.figure(figsize=(17,8)) # Time stamp\u662f\u4e00\u5217 # System power generated | (kW) \u662f\u4e00\u5217 sns.scatterplot(data=df,x=\"Time stamp\",y=\"System power generated | (kW)\",) plt.title(\"Effect the time by the system power\") plt.show()","title":"\u4f7f\u7528\u4e24\u5217\u753b\u51fa\u6563\u70b9\u56fe"},{"location":"Research/Multivariate_EDA/#_11","text":"# \u7d22\u5f15\u662f\u5217\u540d\u4e3aTime stamp\u7684\u5217 df.set_index(\"Time stamp\",inplace=True)","title":"\u8bbe\u7f6e\u7d22\u5f15\u5e76\u4e14\u5728\u539f\u6765\u7684\u6570\u636e\u4e0a\u66f4\u6539"},{"location":"Research/Multivariate_EDA/#_12","text":"\u8fd9\u662f\u7531\u4e8e\u7279\u5f81\u548c\u76ee\u6807\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5217\u8868\u91cc\u9762\uff0c\u6240\u4ee5\u9700\u8981\u5206\u5f00 # X \u662f\u7279\u5f81 X = df.drop(columns=\"System power generated | (kW)\") # y \u662f\u8981\u9884\u6d4b\u7684\u91cf y = df[\"System power generated | (kW)\"] # y = system power generated","title":"\u5212\u5206\u9884\u6d4b\u7684\u503c\u548c\u7279\u5f81"},{"location":"Research/Multivariate_EDA/#_13","text":"# \u5212\u5206\u6570\u636e\u96c6 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42) # \u6253\u5370\u6570\u636e\u7684\u6570\u91cf\uff0c\u6ce8\u610fy\u5e94\u8be5\u662f\u5f62\u5982(2628\uff0c),\u800cX\u5e94\u8be5\u662f\u5f62\u5982(6132,5)\uff0c5\u662f\u7279\u5f81\u6570 # 5\u5f53\u4e2d \u4e0d\u5305\u542btimestamp\u8fd9\u4e00\u5217 print(\"X Train : \", X_train.shape) print(\"X Test : \", X_test.shape) print(\"Y Train : \", y_train.shape) print(\"Y Test : \", y_test.shape)","title":"\u5212\u5206\u6570\u636e\u96c6"},{"location":"Research/Multivariate_EDA/#tensorflow","text":"LR = LinearRegression() DTR = DecisionTreeRegressor() RFR = RandomForestRegressor() KNR = KNeighborsRegressor() MLP = MLPRegressor() XGB = XGBRegressor() SVR = SVR()","title":"\u5b9a\u4e49\u6a21\u578b\uff1a \u8fd9\u91cc\u4f7f\u7528tensorflow\u6765\u5b9e\u73b0"},{"location":"Research/Multivariate_EDA/#mse","text":"# \u4e0d\u540c\u7684\u8bad\u7ec3\u597d\u7684\u6a21\u578b li = [LR,DTR,RFR,KNR,KNR,XGB,SVR] # \u8bef\u5dee\u5217\u8868 d = {} for i in li: # \u8fdb\u884c\u9884\u6d4b i.fit(X_train,y_train) #\u8ba1\u7b97\u8bef\u5dee ypred = i.predict(X_test) # \u6253\u5370\u51fa\u6765\u8bef\u5dee print(i,\":\",r2_score(y_test,ypred)*100) # \u4fdd\u5b58\u8bef\u5dee d.update({str(i):i.score(X_test,y_test)*100})","title":"\u5bf9\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u5b9e\u884c\u9884\u6d4b\uff0c\u5e76\u4e14\u8f93\u51faMSE\u7684\u8bef\u5dee\u503c"},{"location":"Research/Multivariate_EDA/#_14","text":"plt.figure(figsize=(30, 6)) plt.title(\"Algorithm vs Accuracy\") plt.xlabel(\"Algorithm\") plt.ylabel(\"Accuracy\") plt.plot(d.keys(),d.values(),marker='o',color='red') plt.show()","title":"\u6253\u5370\u6bcf\u79cd\u9884\u6d4b\u6a21\u578b\u7684\u8bef\u5dee"},{"location":"Research/dataset%20description/","text":"Wind Power Generation Dataset # \u98ce\u529b\u529f\u7387\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u7279\u70b9 # Sample Time # These data is collected from the Supervisory Control and Data Acquisition (SCADA) system. The SCADA data are sampled every 10 minutes from each wind turbine in the wind farm which consists of 134 wind turbines. The statistic of this dataset is shown below. Days Interval # of columns # of turbines # of records 245 10minutes 13 134 4,727,520 This dataset includes critical external features, such as wind speed, wind direction, and external temperature, that influence the wind power generation; as well as essential internal features, such as the inside temperature, nacelle direction and Pitch angle of blades, which can indicate the operating status of each wind turbine. Evaluation # We aim at addressing the forecasting ahead of 48 hours. Fore example, given at 6:00 A.M. today, it is required to effectively forecast the wind power generation beginning from 6:00 A.M. on this day to 5:50 AM on the day after tomorrow, given a series of historical records of the wind farm and the related wind turbines. It is required to output the predicted values every 10 minutes. To be specific, at one time point, it is required to predict a future length-280 wind power supply time-series. The average of RMSE (Root Mean Square Error) and MAE (Mean Absolute Error) is used as the main evaluation score. Caveats about the data # Zero values (if active power and reactive power <0, make them zero) Missing values Unknown values (In some time, the wind turbines are stopped to generate power by external reasons such as wind turbine renovation and/or actively scheduling the powering to avoid overloading the grid; if \\(P a t v \\leq 0\\) and \\(W s p d>2.5\\) , then power is unknown ); if \\(P a b 1>89^{\\circ}\\) or \\(P a b 2>89^{\\circ}\\) or \\(P a b 3>89^{\\circ}\\) , then the actual active power of this wind is unknown. Abnormal values (Nidir \\(>720^{\\circ}\\) or Nidir \\(<-720^{\\circ}\\) , then the actual active power is unknown; Widr \\(>180^{\\circ}\\) or Widr \\(<-180^{\\circ}\\) , then the actual active power is unknown.)","title":"Dataset description"},{"location":"Research/dataset%20description/#wind-power-generation-dataset","text":"","title":"Wind Power Generation Dataset"},{"location":"Research/dataset%20description/#_1","text":"","title":"\u98ce\u529b\u529f\u7387\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u7279\u70b9"},{"location":"Research/dataset%20description/#sample-time","text":"These data is collected from the Supervisory Control and Data Acquisition (SCADA) system. The SCADA data are sampled every 10 minutes from each wind turbine in the wind farm which consists of 134 wind turbines. The statistic of this dataset is shown below. Days Interval # of columns # of turbines # of records 245 10minutes 13 134 4,727,520 This dataset includes critical external features, such as wind speed, wind direction, and external temperature, that influence the wind power generation; as well as essential internal features, such as the inside temperature, nacelle direction and Pitch angle of blades, which can indicate the operating status of each wind turbine.","title":"Sample Time"},{"location":"Research/dataset%20description/#evaluation","text":"We aim at addressing the forecasting ahead of 48 hours. Fore example, given at 6:00 A.M. today, it is required to effectively forecast the wind power generation beginning from 6:00 A.M. on this day to 5:50 AM on the day after tomorrow, given a series of historical records of the wind farm and the related wind turbines. It is required to output the predicted values every 10 minutes. To be specific, at one time point, it is required to predict a future length-280 wind power supply time-series. The average of RMSE (Root Mean Square Error) and MAE (Mean Absolute Error) is used as the main evaluation score.","title":"Evaluation"},{"location":"Research/dataset%20description/#caveats-about-the-data","text":"Zero values (if active power and reactive power <0, make them zero) Missing values Unknown values (In some time, the wind turbines are stopped to generate power by external reasons such as wind turbine renovation and/or actively scheduling the powering to avoid overloading the grid; if \\(P a t v \\leq 0\\) and \\(W s p d>2.5\\) , then power is unknown ); if \\(P a b 1>89^{\\circ}\\) or \\(P a b 2>89^{\\circ}\\) or \\(P a b 3>89^{\\circ}\\) , then the actual active power of this wind is unknown. Abnormal values (Nidir \\(>720^{\\circ}\\) or Nidir \\(<-720^{\\circ}\\) , then the actual active power is unknown; Widr \\(>180^{\\circ}\\) or Widr \\(<-180^{\\circ}\\) , then the actual active power is unknown.)","title":"Caveats about the data"},{"location":"Research/dataset_description/","text":"Wind Power Generation Dataset # \u98ce\u529b\u529f\u7387\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u7279\u70b9 # Sample Time # These data is collected from the Supervisory Control and Data Acquisition (SCADA) system. The SCADA data are sampled every 10 minutes from each wind turbine in the wind farm which consists of 134 wind turbines. The statistic of this dataset is shown below. Days Interval # of columns # of turbines # of records 245 10minutes 13 134 4,727,520 This dataset includes critical external features, such as wind speed, wind direction, and external temperature, that influence the wind power generation; as well as essential internal features, such as the inside temperature, nacelle direction and Pitch angle of blades, which can indicate the operating status of each wind turbine. Evaluation # We aim at addressing the forecasting ahead of 48 hours. Fore example, given at 6:00 A.M. today, it is required to effectively forecast the wind power generation beginning from 6:00 A.M. on this day to 5:50 AM on the day after tomorrow, given a series of historical records of the wind farm and the related wind turbines. It is required to output the predicted values every 10 minutes. To be specific, at one time point, it is required to predict a future length-280 wind power supply time-series. The average of RMSE (Root Mean Square Error) and MAE (Mean Absolute Error) is used as the main evaluation score. Caveats about the data # Zero values (if active power and reactive power <0, make them zero) Missing values Unknown values (In some time, the wind turbines are stopped to generate power by external reasons such as wind turbine renovation and/or actively scheduling the powering to avoid overloading the grid; if \\(P a t v \\leq 0\\) and \\(W s p d>2.5\\) , then power is unknown ); if \\(P a b 1>89^{\\circ}\\) or \\(P a b 2>89^{\\circ}\\) or \\(P a b 3>89^{\\circ}\\) , then the actual active power of this wind is unknown. Abnormal values (Nidir \\(>720^{\\circ}\\) or Nidir \\(<-720^{\\circ}\\) , then the actual active power is unknown; Widr \\(>180^{\\circ}\\) or Widr \\(<-180^{\\circ}\\) , then the actual active power is unknown.)","title":"Wind energy dataset"},{"location":"Research/dataset_description/#wind-power-generation-dataset","text":"","title":"Wind Power Generation Dataset"},{"location":"Research/dataset_description/#_1","text":"","title":"\u98ce\u529b\u529f\u7387\u6570\u636e\u96c6\u7684\u4e00\u4e9b\u7279\u70b9"},{"location":"Research/dataset_description/#sample-time","text":"These data is collected from the Supervisory Control and Data Acquisition (SCADA) system. The SCADA data are sampled every 10 minutes from each wind turbine in the wind farm which consists of 134 wind turbines. The statistic of this dataset is shown below. Days Interval # of columns # of turbines # of records 245 10minutes 13 134 4,727,520 This dataset includes critical external features, such as wind speed, wind direction, and external temperature, that influence the wind power generation; as well as essential internal features, such as the inside temperature, nacelle direction and Pitch angle of blades, which can indicate the operating status of each wind turbine.","title":"Sample Time"},{"location":"Research/dataset_description/#evaluation","text":"We aim at addressing the forecasting ahead of 48 hours. Fore example, given at 6:00 A.M. today, it is required to effectively forecast the wind power generation beginning from 6:00 A.M. on this day to 5:50 AM on the day after tomorrow, given a series of historical records of the wind farm and the related wind turbines. It is required to output the predicted values every 10 minutes. To be specific, at one time point, it is required to predict a future length-280 wind power supply time-series. The average of RMSE (Root Mean Square Error) and MAE (Mean Absolute Error) is used as the main evaluation score.","title":"Evaluation"},{"location":"Research/dataset_description/#caveats-about-the-data","text":"Zero values (if active power and reactive power <0, make them zero) Missing values Unknown values (In some time, the wind turbines are stopped to generate power by external reasons such as wind turbine renovation and/or actively scheduling the powering to avoid overloading the grid; if \\(P a t v \\leq 0\\) and \\(W s p d>2.5\\) , then power is unknown ); if \\(P a b 1>89^{\\circ}\\) or \\(P a b 2>89^{\\circ}\\) or \\(P a b 3>89^{\\circ}\\) , then the actual active power of this wind is unknown. Abnormal values (Nidir \\(>720^{\\circ}\\) or Nidir \\(<-720^{\\circ}\\) , then the actual active power is unknown; Widr \\(>180^{\\circ}\\) or Widr \\(<-180^{\\circ}\\) , then the actual active power is unknown.)","title":"Caveats about the data"},{"location":"Research/we/","text":"fasdfasd","title":"If you can"}]}